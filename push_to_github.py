import base64, os, sys, requests
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("GITHUB_TOKEN")
REPO = os.getenv("REPO_FULL")
BASE = os.getenv("BASE_BRANCH", "main")

API = "https://api.github.com"
HEADERS = {
    "Authorization": f"Bearer {TOKEN}",
    "Accept": "application/vnd.github+json"
}

def get_base_sha(branch):
    r = requests.get(f"{API}/repos/{REPO}/git/ref/heads/{branch}", headers=HEADERS)
    r.raise_for_status()
    return r.json()["object"]["sha"]

def create_branch(new_branch, base_sha):
    r = requests.post(f"{API}/repos/{REPO}/git/refs", headers=HEADERS, json={
        "ref": f"refs/heads/{new_branch}",
        "sha": base_sha
    })
    if r.status_code == 422:
        print(f"⚠️ ブランチ {new_branch} は既に存在します。再利用します。")
    else:
        r.raise_for_status()

def get_file_sha(repo_path, branch):
    r = requests.get(f"{API}/repos/{REPO}/contents/{repo_path}?ref={branch}", headers=HEADERS)
    if r.status_code == 404:
        return None
    r.raise_for_status()
    return r.json()["sha"]

def upload_file(local_path, repo_path, branch, sha=None):
    content = base64.b64encode(open(local_path, "rb").read()).decode()
    message = f"auto update {repo_path}"
    payload = {"message": message, "content": content, "branch": branch}
    if sha: payload["sha"] = sha
    r = requests.put(f"{API}/repos/{REPO}/contents/{repo_path}", headers=HEADERS, json=payload)
    r.raise_for_status()
    print(f"✅ ファイル更新成功: {repo_path}")

def create_pr(branch, base):
    title = f"[GPT] Auto update {branch}"
    body = "This pull request was automatically generated by GPT script."
    r = requests.post(f"{API}/repos/{REPO}/pulls", headers=HEADERS, json={
        "title": title,
        "head": branch,
        "base": base,
        "body": body
    })
    r.raise_for_status()
    pr_url = r.json()["html_url"]
    print(f"✅ Pull Request 作成完了: {pr_url}")

def main():
    if len(sys.argv) < 3:
        print("Usage: python push_to_github.py <local_file> <repo_path>")
        sys.exit(1)
    local_file, repo_path = sys.argv[1], sys.argv[2]

    ts = datetime.now().strftime("%Y%m%d-%H%M")
    new_branch = f"gpt/update-{ts}"

    base_sha = get_base_sha(BASE)
    create_branch(new_branch, base_sha)
    sha = get_file_sha(repo_path, new_branch)
    upload_file(local_file, repo_path, new_branch, sha)
    create_pr(new_branch, BASE)

if __name__ == "__main__":
    main()
